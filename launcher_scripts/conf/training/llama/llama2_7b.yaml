run:
  name: llama2_7b
  results_dir: ${base_results_dir}/${.name}
  time_limit: "7-00:00:00"
  dependency: "singleton"

trainer:
  num_nodes: 8 # number of nodes for training
  devices: 8 # number of gpus per node
  accelerator: gpu
  precision: bf16
  logger: false # logger provided by exp_manager
  enable_checkpointing: false # either set enable_checkpointing=true or create_checkpoint_callback=true
  use_distributed_sampler: false
  max_epochs: null
  max_steps: 128000 # consumed_samples = global_step * global_batch_size = global_step * micro_batch_size * data_parallel_size * micro_batch_num
  max_time: "06:23:30:00" # days:hours:minutes:seconds
  log_every_n_steps: 10
  val_check_interval: 2000
  limit_val_batches: 32
  limit_test_batches: 50
  accumulate_grad_batches: 1 # do not modify, grad acc is automatic for training megatron models
  gradient_clip_val: 1.0

exp_manager:
  explicit_log_dir: ${training.run.results_dir}/results
  exp_dir: null
  name: megatron_llama
  create_wandb_logger: false
  wandb_logger_kwargs:
    project: nemo_llama_pretrain
    name: ${training.run.name}
  resume_if_exists: true # resume training if checkpoints already exist
  resume_ignore_no_checkpoint: true # to start training with no existing checkpoints
  create_checkpoint_callback: true # either set enable_checkpointing=true or create_checkpoint_callback=true
  checkpoint_callback_params:
    every_n_train_steps: 1000 # save checkpoints every n global steps
    every_n_epochs: null
    monitor: val_loss
    save_top_k: 10
    mode: min
    always_save_nemo: false # saves nemo file during validation, not implemented for model parallel
    save_nemo_on_train_end: false # not recommended when training large models on clusters with short time limits
    filename: 'megatron_llama-{step}-{consumed_samples}'
    model_parallel_size: ${multiply:${training.model.tensor_model_parallel_size}, ${training.model.pipeline_model_parallel_size}}
  log_step_timing: true
  step_timing_kwargs:
    sync_cuda: true
    buffer_size: 5
  global_batch_tokens: ${multiply:${training.model.global_batch_size}, ${training.model.encoder_seq_length}}
  gpu_num: ${multiply:${training.trainer.num_nodes}, ${training.trainer.devices}}

model:
  # Parallelism: tps=1, pps=1
  mcore_gpt: true # use GPTModel from megatron.core
  micro_batch_size: 1 # limited by GPU memory
  global_batch_size: 1024 # will use more micro batches to reach global batch size
  rampup_batch_size: null # Should be a list of 3 values: [<start_batch_size>, <batch_size_increment>, <rampup_samples>]
  tensor_model_parallel_size: 2 # intra-layer model parallelism
  pipeline_model_parallel_size: 1 # inter-layer model parallelism
  virtual_pipeline_model_parallel_size: null # interleaved pipeline
  
  # Model architecture
  encoder_seq_length: 4096
  min_length: 50 # todo
  max_position_embeddings: 4096
  num_layers: 32
  hidden_size: 4096
  ffn_hidden_size: 11008 # Transformer FFN hidden size.
  num_attention_heads: 32
  init_method_std: 0.02 # Standard deviation of the zero mean normal distribution used for weight initialization
  use_scaled_init_method: true # use scaled residuals initialization
  hidden_dropout: 0.0 # Dropout probability for hidden state transformer.
  attention_dropout: 0.0 # Dropout probability for attention
  ffn_dropout: 0.0 # Dropout probability in the feed-forward layer.
  kv_channels: null # Projection weights dimension in multi-head attention. Set to hidden_size // num_attention_heads if null
  apply_query_key_layer_scaling: true # scale Q * K^T by 1 / layer-number.
  normalization: rmsnorm # Normalization layer to use. Options are 'layernorm', 'rmsnorm'
  layernorm_epsilon: 1.0e-05
  do_layer_norm_weight_decay: false # True means weight decay on all params
  make_vocab_size_divisible_by: 128 # Pad the vocab size to be divisible by this value for computation efficiency.
  pre_process: true # add embedding
  post_process: true # add pooler
  persist_layer_norm: true # Use of persistent fused layer norm kernel.
  bias: false # Whether to use bias terms in all weight matrices.
  activation: swiglu # Options ['gelu', 'geglu', 'swiglu', 'reglu', 'squared-relu', 'fast-geglu', 'fast-swiglu', 'fast-reglu']
  headscale: false # Whether to learn extra parameters that scale the output of the each self-attention head.
  transformer_block_type: pre_ln # Options ['pre_ln', 'post_ln', 'normformer']
  openai_gelu: false # Use OpenAI's GELU instead of the default GeLU
  normalize_attention_scores: true # Whether to scale the output Q * K^T by 1 / sqrt(hidden_size_per_head). This arg is provided as a configuration option mostly for compatibility with models that have been weight-converted from HF. You almost always want to se this to True.
  position_embedding_type: rope # Position embedding type. Options ['learned_absolute', 'rope', 'alibi', 'kerple' , 'xpos', 'sandwich'] xpos and sandwich are experimental.
  rotary_percentage: 1.0 # If using position_embedding_type=rope, then the per head dim is multiplied by this.
  attention_type: multihead # Attention type. Options ['multihead']
  share_embeddings_and_output_weights: false # Share embedding and output layer weights.
  tokenizer: # todo
    library: 'sentencepiece'
    type: null
    model: ${data_dir}/llama/llama_tokenizer.model
    delimiter: null
    vocab_file: null
    merge_file: null
    sentencepiece_legacy: false
  
  # Mixed precision
  native_amp_init_scale: 65536 # 4294967296=2**32, 65536=2**16
  native_amp_growth_interval: 1000
  hysteresis: 2 # Gradient scale hysteresis
  fp32_residual_connection: false # Move residual connections to fp32
  fp16_lm_cross_entropy: false # Move the cross entropy unreduced loss calculation for lm head to fp16
  
  # Megatron O2-style half-precision
  megatron_amp_O2: true # Enable O2-level automatic mixed precision using main parameters
  grad_allreduce_chunk_size_mb: 125
  
  # Fusion
  grad_div_ar_fusion: true # Fuse grad division into torch.distributed.all_reduce. Only used with O2 and no pipeline parallelism.
  gradient_accumulation_fusion: true # Fuse weight gradient accumulation to GEMMs. Only used with pipeline parallelism and O2.
  bias_activation_fusion: false # Use a kernel that fuses the bias addition from weight matrices with the subsequent activation function.
  bias_dropout_add_fusion: false # Use a kernel that fuses the bias addition, dropout and residual connection addition.
  masked_softmax_fusion: true # Use a kernel that fuses the attention softmax with it's mask.
  get_attention_mask_from_fusion: true # When using fused softmax it will create the attention mask so we won't copy it to the pipeline stages.
  
  # Miscellaneous
  seed: 1024
  resume_from_checkpoint: null # manually set the checkpoint file to load from
  use_cpu_initialization: false # Init weights on the CPU (slow for large models)
  onnx_safe: false # Use work-arounds for known problems with Torch ONNX exporter.
  apex_transformer_log_level: 30 # Python logging level displays logs with severity greater than or equal to this
  gradient_as_bucket_view: true # PyTorch DDP argument. Allocate gradients in a contiguous bucket to save memory (less fragmentation and buffer memory)
  sync_batch_comm: false # Enable stream synchronization after each p2p communication between pipeline stages
  
  # Activation checkpointing
  activations_checkpoint_granularity: selective # 'selective' or 'full' 
  activations_checkpoint_method: block # 'uniform', 'block'
  activations_checkpoint_num_layers: 0
  num_micro_batches_with_partial_activation_checkpoints: null
  activations_checkpoint_layers_per_pipeline: null
  
  # Sequence parallel
  sequence_parallel: true

  # Transformer engine
  # fp8 training is currently not supported in the improved models
  transformer_engine: true
  fp8: false # enables fp8 in TransformerLayer forward
  fp8_e4m3: false # sets fp8_format = recipe.Format.E4M3
  fp8_hybrid: false # sets fp8_format = recipe.Format.HYBRID
  fp8_margin: 0 # scaling margin
  fp8_interval: 1 # scaling update interval
  fp8_amax_history_len: 1024 # Number of steps for which amax history is recorded per tensor
  fp8_amax_compute_algo: max # 'most_recent' or 'max'. Algorithm for computing amax from history
  use_emha: false # Use fused multi-head attention for large sequence-length. Note this is not yet supported. Please set to False.
  ub_tp_comm_overlap: false # Use userbuffer backend to overlap tensor-parallel communications with computes.
  
  # Flash attention
  use_flash_attention: true # Use flash attention in self-attention module, this config does nothing when transformer_engine=True

  # Garbage collection
  gc_interval: 0 # gc_interval=0 represents automatic gc; else gc is done manually by the batch step interval of `gc_interval`

  optim:
    name: distributed_fused_adam
    lr: 3e-4
    weight_decay: 0.01
    betas:
      - 0.9
      - 0.95
    bucket_cap_mb: 125
    overlap_grad_sync: true
    overlap_param_sync: true
    contiguous_grad_buffer: true    
    sched:
      name: CosineAnnealing
      warmup_ratio: 0.016
      constant_steps: 0
      min_lr: 3e-5

  data:
    use_internlm_dl: true

    # Dataloader common params
    seq_length: ${training.model.encoder_seq_length}
    num_workers: 2

    # Dataloader params only for internlm
    train_folder: null
    min_length: 50
    pack_sample_into_one: true

    # Dataloader params only for megatron
    data_impl: mmap # mmap, retmmap, text_mmap, csv_mmap, mock
    dataloader_type: single # cyclic
    skip_warmup: true
    splits_string: "99990,8,2"
    reset_position_ids: false # Reset position ids after end-of-document token
    reset_attention_mask: false # Reset attention mask after end-of-document token
    eod_mask_loss: false # Mask loss for the end of document tokens
    index_mapping_dir: null # path to save index mapping .npy files, by default will save in the same location as data_prefix
    data_prefix:
    - ${data_dir}/my-llama_00_text_document

# set trainer.num_nodes=1 and trainer.devices=1 when convert checkpoint from nemo-megatron to hf
convert:
  input_nemo_ckpt: null
  output_hf_ckpt: null